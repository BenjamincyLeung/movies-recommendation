// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Films {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  image             String              @unique
  adult             Boolean
  overview          String              @db.VarChar(1024)
  release_date      DateTime
  ratings           Ratings[]
  collection        Collection[]
  categories        FilmCategories[]
  userPinCategories Choose3categories[]

  @@map("films")
}

model Categories {
  id       Int              @id @default(autoincrement())
  category String
  films    FilmCategories[]

  @@map("categories")
}

model FilmCategories {
  id          Int        @id @default(autoincrement())
  film        Films      @relation(fields: [film_id], references: [id])
  film_id     Int
  category    Categories @relation(fields: [category_id], references: [id])
  category_id Int

  @@map("film_categories")
}

model Ratings {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  film_rating Films  @relation(fields: [film_id], references: [id])
  film_id     Int
  rating      Int

  @@map("ratings")
}

model Choose3categories {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  film    Films  @relation(fields: [film_id], references: [id])
  film_id Int

  @@map("choose3categories")
}

model Collection {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  film    Films  @relation(fields: [film_id], references: [id])
  film_id Int

  @@map("collection")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  hashedPassword    String?
  image             String?
  gender            String?
  isActive          Boolean             @default(true)
  registeredAt      DateTime            @default(now())
  ratings           Ratings[]
  choose3categories Choose3categories[]
  collection        Collection[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
